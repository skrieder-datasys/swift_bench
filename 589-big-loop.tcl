
# Generated by stc version 0.2.0
# date                    : 2014/03/19 10:28:32
# Turbine version         : 0.3.0
# Input filename          : /mnt/a/u/sciteam/tarmstro/swift_bench.git/589-big-loop.swift
# Output filename         : /mnt/a/u/sciteam/tarmstro/swift_bench.git/589-big-loop.tcl
# STC home                : /mnt/a/u/sciteam/tarmstro/exm.sfw.git/stc/trunk/code
# Turbine home            : /u/sciteam/tarmstro/soft/exm-dev/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.codegen.no-stack          : true
# stc.codegen.no-stack-vars     : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : 589-big-loop.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dead-code-elim        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-dataflow-ops   : true
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : true
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-unroll           : true
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 500
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : true
# stc.opt.reorder-insts         : true
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 589-big-loop.tcl
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /mnt/a/u/sciteam/tarmstro/exm.sfw.git/stc/trunk/code
# stc.turbine.version           : 0.3.0
# stc.turbine_home              : /u/sciteam/tarmstro/soft/exm-dev/turbine
# stc.version                   : 0.2.0

# Metadata:

package require turbine 0.3.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}


proc swift:main {  } {
    turbine::c::log "enter function: main"
    set stack 0
    # Var: $string optv:__t0 VALUE_OF [string:__t0]
    # Var: $int optv:bound VALUE_OF [int:bound]
    # Var: $string optv:__t2 VALUE_OF [string:__t2]
    # Var: $float optv:sleepTime VALUE_OF [float:sleepTime]
    # Var: $int optv:__t6 VALUE_OF [int:__t6]
    # Var: $void optv:__t4 VALUE_OF [void:__t4]
    # Var: $void optv:__t7 VALUE_OF [void:__t7]
    # Var: $void optv:__t9 VALUE_OF [void:__t9]
    # Var: $int optv:main-range0:rem OPT_TEMPORARY
    # Var: $int optv:main-range0:remstart OPT_TEMPORARY
    # Var: $int optv:main-range0:unrollEnd OPT_TEMPORARY
    # Swift l.14: assigning expression to bound
    set optv:__t0 [ turbine::argv_get_impl "bound" ]
    # Swift l.15: assigning expression to sleepTime
    set optv:__t2 [ turbine::argv_get_impl "sleeptime" ]
    # Swift l.18 evaluating  expression and throwing away 1 results
    set optv:__t6 [ turbine::argc_get_impl ]
    # Swift l.19 evaluating  expression and throwing away 1 results
    # Swift l.20 evaluating  expression and throwing away 1 results
    # Swift l.24 evaluating  expression and throwing away 1 results
    set optv:bound [ turbine::check_str_int ${optv:__t0} ]
    set optv:main-range0:rem [ turbine::mod_integer_impl ${optv:bound} 8 ]
    set optv:sleepTime [ turbine::check_str_float ${optv:__t2} ]
    set optv:main-range0:unrollEnd [ expr { ${optv:bound} - ${optv:main-range0:rem} } ]
    set optv:main-range0:remstart [ expr { ${optv:main-range0:unrollEnd} + 1 } ]
    set optv:__t4 [ turbine::printf_local "The number of arguments is: %i\n" ${optv:__t6} ]
    set optv:__t9 [ turbine::printf_local "The sleeptime is: %f\n" ${optv:sleepTime} ]
    set optv:__t7 [ turbine::printf_local "The bound is: %i\n" ${optv:bound} ]
    main-range0:outer ${stack} ${optv:sleepTime} ${optv:main-range0:remstart} ${optv:bound} 1
    main-range0:outer-1 ${stack} ${optv:sleepTime} 1 ${optv:main-range0:unrollEnd} 8
}


proc main-range0:outer { stack optv:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            main-range0:inner ${stack} ${optv:sleepTime} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 1 "command main-range0:outer ${stack} ${optv:sleepTime} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc main-range0:inner { stack optv:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:i ${tcltmp:lo} } { ${v:i} <= ${tcltmp:hi} } { incr v:i ${tcltmp:inc} } {
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep ${stack} ${optv:sleepTime}"
        turbine::reset_priority
    }
}


proc main-call_foreign-sleep { stack optv:sleepTime } {
    # Var: $void optv:__t13 VALUE_OF [void:__t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-range0:outer-1 { stack optv:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 8 } ] } {
            main-range0:inner-1 ${stack} ${optv:sleepTime} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(8,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 1 "command main-range0:outer-1 ${stack} ${optv:sleepTime} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc main-range0:inner-1 { stack optv:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:i:1 ${tcltmp:lo} } { ${v:i:1} <= ${tcltmp:hi} } { incr v:i:1 ${tcltmp:inc} } {
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-1 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-2 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-3 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-4 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-5 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-6 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-7 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "-1 main-call_foreign-sleep-8 ${stack} ${optv:sleepTime}"
        turbine::reset_priority
    }
}


proc main-call_foreign-sleep-1 { stack optv:sleepTime } {
    # Var: $void optv:__t13:1 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-2 { stack optv:sleepTime } {
    # Var: $void optv:__t13:2 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-3 { stack optv:sleepTime } {
    # Var: $void optv:__t13:3 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-4 { stack optv:sleepTime } {
    # Var: $void optv:__t13:4 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-5 { stack optv:sleepTime } {
    # Var: $void optv:__t13:5 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-6 { stack optv:sleepTime } {
    # Var: $void optv:__t13:6 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-7 { stack optv:sleepTime } {
    # Var: $void optv:__t13:7 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}


proc main-call_foreign-sleep-8 { stack optv:sleepTime } {
    # Var: $void optv:__t13:8 RENAMED [$void:__ov___t13]
    if { ${optv:sleepTime} > 0 } { after [ expr {round( ${optv:sleepTime} * 1000)} ] }
}

turbine::defaults
turbine::init $engines $servers "Swift"
turbine::enable_read_refcount
turbine::xpt_init
turbine::check_constants "WORKER" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::CONTROL_TASK} 1 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
turbine::start swift:main swift:constants
turbine::finalize
turbine::xpt_finalize

